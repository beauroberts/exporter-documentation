(()=>{var t={"./assets/js/search.js":()=>{function t(t){$(".SNSearch").toggleClass("active"),$(".SNSearch").is(".active")&&($(".SNSearch-input").val(""),$(".SNSearch-input").focus(),$(".SNSearch-results").html('<p class="section-title empty">Start your search by typing your phrase</p>')),t.preventDefault()}function e(){$(".SNSearch").is(".active")&&$(".SNSearch").removeClass("active")}$(".search").on("click",(function(e){t(),e.preventDefault()})),$(".SNSearch").on("click",(function(t){e()})),$(".SNSearch-box").on("click",(function(t){t.stopPropagation()})),document.addEventListener("animationstart",(function(t){"fade-in"===t.animationName&&t.target.classList.add("did-fade-in")})),document.addEventListener("animationend",(function(t){"fade-out"===t.animationName&&t.target.classList.remove("did-fade-in")}));let n=0;function s(){$(".sn-search-result-link").removeClass("selected");const t=$(`.sn-search-result-link:eq(${n})`);t&&(t.addClass("selected"),function(t,e){let n=t.getBoundingClientRect(),s=e.getBoundingClientRect();n.bottom>s.bottom&&t.scrollIntoView(!1);n.top<s.top&&t.scrollIntoView()}(t[0],t.parent()[0]))}function a(t,e,n){if(-1===e)return t;return`${t.substring(0,e)}<span>${t.substring(e,n)}</span>${t.substring(n)}`}$(".SNSearch-input").on("input",(function(t){let i=$(this).val(),o=$(".SNSearch-results");if(i.length<2)return void o.html('<p class="section-title empty">Start your search by typing your phrase</p>');let r=new Fuse(FuseSearchData,{shouldSort:!0,threshold:.1,location:0,distance:100,maxPatternLength:32,minMatchCharLength:1,ignoreLocation:!0,keys:["text"]}).search(i);if(0===r.length)return void o.html('<p class="section-title empty">No results found, change your search phrase</p>');o.html("");let c=[],l=[],d=[];for(let t of r){let e=t.item;e.startIndex=e.text.toLowerCase().indexOf(i.toLowerCase()),e.endIndex=e.startIndex+i.length,"contentBlock"===e.type?c.push(e):"sectionHeader"===e.type?l.push(e):d.push(e)}if(d.length>0){let t=d;o.append(`<p class="section-title">Pages & Categories (${t.length})</p>`);let e=0;for(let n of t)if(o.append(`\n\t\t  <a href="${n.url}" class="sn-search-result-link">\n\t\t  <div class="result">\n\t\t\t<p class="section-result-header">${a(n.text,n.startIndex,n.endIndex)}</p>\n\t\t\t<p class="section-result-text">${n.category}</p>\n\t\t  </div>\n\t\t  </a>`),++e>5)break}if(l.length>0){o.append(`<p class="section-title">Content sections (${l.length})</p>`);let t=0;for(let e of l)if(o.append(`\n\t\t  <a href="${e.url}" class="sn-search-result-link">\n\t\t  <div class="result">\n\t\t\t<p class="section-result-header">${a(e.text,e.startIndex,e.endIndex)}</p>\n\t\t\t<p class="section-result-text">On page ${e.category}</p>\n\t\t  </div>\n\t\t  </a>`),++t>5)break}if(c.length>0){o.append(`<p class="section-title">Content (${c.length})</p>`);let t=0;for(let e of c)if(o.append(`\n\t\t  <a href="${e.url}" class="sn-search-result-link">\n\t\t  <div class="result">\n\t\t\t<p class="section-result-header">${a(e.text,e.startIndex,e.endIndex)}</p>\n\t\t\t<p class="section-result-text">On page ${e.category}</p>\n\t\t  </div>\n\t\t  </a>`),++t>20)break}$(".sn-search-result-link").on("click",(function(t){e()})),n=0,s()})),hotkeys.filter=function(t){return!0},hotkeys("cmd+k,ctrl+k,esc, up, down, enter, return",(function(a,i){switch(i.key){case"esc":o=a,$(".SNSearch-input").val().length>0?$(".SNSearch-input").val(""):$(".SNSearch").removeClass("active"),o.preventDefault();break;case"cmd+k":case"ctrl+k":t(a);break;case"up":!function(t){$(".SNSearch").is(".active")&&(t.preventDefault(),n>0&&n--,s())}(a);break;case"down":!function(t){$(".SNSearch").is(".active")&&(t.preventDefault(),n<$(".sn-search-result-link").length-1&&n++,s())}(a);break;case"enter":case"return":!function(t){if(!$(".SNSearch").is(".active"))return;t.preventDefault();const s=$(`.sn-search-result-link:eq(${n})`);if(s){const t=s.attr("href");t&&(window.location.href=t,e())}}(a)}var o}))},"./assets/js/syncscroll.js":function(t,e){var n,s,a;s=[e],n=function(t){var e="Width",n="Height",s="Top",a="Left",i="scroll",o="client",r="EventListener",c="add"+r,l="length",d=Math.round,u={},p=function(){var t,p,h,f,g,v=document.getElementsByClassName("sync"+i);for(g in u)if(u.hasOwnProperty(g))for(t=0;t<u[g][l];t++)u[g][t]["remove"+r](i,u[g][t].syn,0);for(t=0;t<v[l];)if(f=p=0,g=(h=v[t++]).getAttribute("name")){for(h=h[i+"er"]||h;p<(u[g]=u[g]||[])[l];)f|=u[g][p++]==h;f||u[g].push(h),h.eX=h.eY=0,function(t,r){t[c](i,t.syn=function(){var c,p=u[r],h=t[i+a],f=t[i+s],g=h/(t[i+e]-t[o+e]),v=f/(t[i+n]-t[o+n]),$=h!=t.eX,m=f!=t.eY,x=0;for(t.eX=h,t.eY=f;x<p[l];)(c=p[x++])!=t&&($&&d(c[i+a]-(h=c.eX=d(g*(c[i+e]-c[o+e]))))&&(c[i+a]=h),m&&d(c[i+s]-(f=c.eY=d(v*(c[i+n]-c[o+n]))))&&(c[i+s]=f))},0)}(h,g)}};"complete"==document.readyState?p():window[c]("load",p,0),t.reset=p},void 0===(a="function"==typeof n?n.apply(e,s):n)||(t.exports=a)},"./assets/js/toast.js":()=>{$.extend({toast:function(t){if(!$("#toast-div").length){var e=t.title,n=t.duration||2e3,s=t.width||"auto",a=t.height||"16px",i=t.position||"",o=t.backgroundColor||"rgba(0, 0, 0, .7)",r=t.textColor||"#fff";if("bottom"==i?i="bottom: 48px;":"middle"==i?i="top: calc(45% - 15px);":"top"==i?i="top: 0px;":""===i&&(i="top: 80%;"),t.flag||!0)var c="<div id='toast-div' style='position: fixed;display: none; z-index:999;font-size: 18px; "+i+";left: 0;width:100%; height: "+a+"; text-align: center'>";else c="<div id='toast-div' style='position: fixed; display: none;z-index:999; font-size: 14px; font-weight: 500; top: 0; left: 0;width:100%; height:100%; text-align: center'>";c+='<div id="toast-content" style="display: inline-block; width: '+s+";min-height: "+a+";padding: 8px;background-color: "+o+";text-align: center;font-size: 14px; font-weight: 500;line-height: "+(t.lineheight||a)+";border-radius: 4px;color: "+r+';">'+e+"</div>",c+="</div>",$("body").append(c),$("#toast-div").fadeIn(200),setTimeout((function(){$("#toast-div").fadeOut(200)}),n),setTimeout((function(){$("#toast-div").remove()}),n+300)}}})},"./scss/main.scss":(t,e,n)=>{"use strict";n.r(e)}},e={};function n(s){var a=e[s];if(void 0!==a)return a.exports;var i=e[s]={exports:{}};return t[s].call(i.exports,i,i.exports,n),i.exports}n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n("./assets/js/toast.js"),n("./assets/js/syncscroll.js"),n("./assets/js/search.js");n("./scss/main.scss")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,